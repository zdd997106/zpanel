generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid          Int      @id @default(autoincrement())
  clientId     String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique @db.VarChar(64)
  password     String   @db.VarChar(64)
  name         String   @db.VarChar(64)
  bios         String   @default("")
  roleId       Int
  avatarId     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  role         Role     @relation(fields: [roleId], references: [rid])
  avatar       Media?   @relation(name: "userAvatar", fields: [avatarId], references: [mid], onUpdate: NoAction, onDelete: NoAction)
  createdMedia Media[]  @relation(name: "uploadMedia")
}

model Role {
  rid         Int              @id @default(autoincrement())
  clientId    String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String           @unique @db.VarChar(64)
  name        String           @db.VarChar(64)
  description String
  deleted     Boolean          @default(false)
  status      Int              @db.SmallInt
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  users       User[]
  permissions RolePermission[]
}

model Permission {
  pid         Int              @id @default(autoincrement())
  clientId    String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String           @unique @db.VarChar(64)
  name        String           @db.VarChar(64)
  action      Int              @db.SmallInt
  status      Int              @db.SmallInt
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  parentId    Int?             @db.Integer
  deleted     Boolean          @default(false)
  parent      Permission?      @relation(name: "children", fields: [parentId], references: [pid])
  children    Permission[]     @relation(name: "children")
  roles       RolePermission[]

  @@index([parentId])
  @@index([clientId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  action       Int        @db.SmallInt
  role         Role       @relation(fields: [roleId], references: [rid])
  permission   Permission @relation(fields: [permissionId], references: [pid])

  @@id([roleId, permissionId])
}

model Media {
  mid         Int      @id @default(autoincrement())
  clientId    String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(128)
  size        Int
  mineTypes   String   @db.VarChar(64)
  uploaderId  Int
  status      Int      @default(1) @db.SmallInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  uploader    User     @relation(name: "uploadMedia", fields: [uploaderId], references: [uid])
  avatarUsers User[]   @relation(name: "userAvatar")

  @@index([uploaderId])
}

model Application {
  aid          Int    @id @default(autoincrement())
  clientId     String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String @unique @db.VarChar(64)
  name         String @db.VarChar(64)
  introduction String @default("")
  status       Int    @default(1) @db.SmallInt
}

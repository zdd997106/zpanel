generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid                  Int           @id @default(autoincrement())
  clientId             String        @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String        @unique @db.VarChar(64)
  password             String        @db.VarChar(64)
  name                 String        @db.VarChar(64)
  bios                 String        @default("")
  roleId               Int
  avatarId             Int?
  emailNotify          Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())
  role                 Role          @relation(fields: [roleId], references: [rid])
  avatar               Media?        @relation(name: "userAvatar", fields: [avatarId], references: [mid], onUpdate: NoAction, onDelete: NoAction)
  createdMedia         Media[]       @relation(name: "uploadMedia")
  reviewedApplications Application[]
  modifiedObjects      Object[]
  modifiedAppKeys      AppKey[]      @relation(name: "modifier")
  appKeys              AppKey[]
}

model Role {
  rid         Int              @id @default(autoincrement())
  clientId    String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String           @unique @db.VarChar(64)
  name        String           @db.VarChar(64)
  description String
  deleted     Boolean          @default(false)
  status      Int              @db.SmallInt
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  users       User[]
  permissions RolePermission[]
}

model Permission {
  pid       Int              @id @default(autoincrement())
  clientId  String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String           @unique @db.VarChar(64)
  name      String           @db.VarChar(64)
  action    Int              @db.SmallInt
  status    Int              @db.SmallInt
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  parentId  Int?             @db.Integer
  deleted   Boolean          @default(false)
  parent    Permission?      @relation(name: "children", fields: [parentId], references: [pid])
  children  Permission[]     @relation(name: "children")
  roles     RolePermission[]

  @@index([parentId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  action       Int        @db.SmallInt
  role         Role       @relation(fields: [roleId], references: [rid])
  permission   Permission @relation(fields: [permissionId], references: [pid])

  @@id([roleId, permissionId])
}

model Media {
  mid         Int      @id @default(autoincrement())
  clientId    String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(128)
  size        Int
  mineTypes   String   @db.VarChar(128)
  uploaderId  Int
  status      Int      @default(1) @db.SmallInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  uploader    User     @relation(name: "uploadMedia", fields: [uploaderId], references: [uid])
  avatarUsers User[]   @relation(name: "userAvatar")
  objects     Object[]

  @@index([uploaderId])
}

model Application {
  aid          Int      @id @default(autoincrement())
  clientId     String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique @db.VarChar(64)
  name         String   @db.VarChar(64)
  introduction String   @default("")
  status       Int      @db.SmallInt
  rejectReason String?  @db.VarChar(256)
  reviewerId   Int?
  reviewer     User?    @relation(fields: [reviewerId], references: [uid])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([reviewerId])
}

model Object {
  oid            Int      @id @default(autoincrement())
  clientId       String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String   @unique @db.VarChar(64)
  data           String   @default("")
  // parentId       Int?
  lastModifierId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  // parent         Object?  @relation(name: "children", fields: [parentId], references: [oid])
  // children       Object[] @relation(name: "children")
  medias         Media[]
  lastModifier   User?    @relation(fields: [lastModifierId], references: [uid])

  // @@index([parentId])
  @@index([code])
}

model AppKey {
  kid            Int         @id @default(autoincrement())
  clientId       String      @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String      @db.VarChar(64)
  key            String      @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status         Int         @default(1) @db.SmallInt
  ownerId        Int
  allowPaths     String
  lastModifierId Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  expiresAt      DateTime?
  deleted        Boolean     @default(false)
  owner          User        @relation(fields: [ownerId], references: [uid])
  lastModifier   User?       @relation(name: "modifier", fields: [lastModifierId], references: [uid])
  logs           AppLog[]
  reports        AppReport[]
}

model AppLog {
  lid       Int      @id @default(autoincrement())
  appKeyId  Int?
  appKey    AppKey?  @relation(fields: [appKeyId], references: [kid])
  path      String
  method    String
  origin    String?
  referer   String?
  duration  Int?
  status    Int
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([appKeyId])
}

model AppReport {
  rid       Int      @id @default(autoincrement())
  clientId  String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appKeyId  Int
  appKey    AppKey   @relation(fields: [appKeyId], references: [kid])
  data      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([appKeyId])
}
